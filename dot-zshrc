if [[ -f /etc/profile.d/http_proxy ]];then
    source /etc/profile.d/http_proxy
fi
    
# If we do not have antigen installed, then grab it from the github repo
if [[ ! -d ~/.zsh/antigen ]];then
   mkdir ~/.zsh
   (cd ~/.zsh/ ; git clone https://github.com/zsh-users/antigen.git )
fi
if [[ ! -d ~/.zsh/gnome-terminal-colors-monokai ]];then
   mkdir ~/.zsh
   (cd ~/.zsh/ ; git clone https://github.com/pricco/gnome-terminal-colors-monokai.git )
   (cd ~/.zsh/gnome-terminal-colors-monokai; ./install.sh -p Default)
fi
source ~/.zsh/antigen/antigen.zsh

# Load the oh-my-zsh's library.
antigen use oh-my-zsh

# Bundles from the default repo (robbyrussell's oh-my-zsh).
antigen bundle git
antigen bundle heroku
antigen bundle pip
antigen bundle python
antigen bundle lein
antigen bundle command-not-found

# python love
#antigen bundle sharat87/autoenv
antigen bundle kennethreitz/autoenv

# Syntax highlighting bundle.
antigen bundle zsh-users/zsh-syntax-highlighting

# Load the theme.
antigen theme candy

# Tell antigen that you're done.
antigen apply

alias ls='ls --color=tty -B'

# add custom completion scripts
fpath=(~/.zsh/completion $fpath)
 
# compsys initialization
autoload -U compinit
compinit
 
# show completion menu when number of options is at least 2
zstyle ':completion:*' menu select=2

#
# The use_env call below is a reusable command to activate/create a new Python
# virtualenv, requiring only a single declarative line of code in your .env files.
# It only performs an action if the requested virtualenv is not the current one.
use_env() {
  typeset venv
  venv="$1"
  if [[ "${VIRTUAL_ENV:t}" != "$venv" ]]; then
    if workon | grep -q "$venv"; then
      workon "$venv"
    else
      echo -n "Create virtualenv $venv now? (Yn) "
      read answer
      if [[ "$answer" == "Y" ]]; then
        mkvirtualenv "$venv"
      fi
    fi
  fi

  #---------------------------------
  # If its a python project then install the requirements file
  #---------------------------------
  if [ -f requirements.txt ];then
  	pip install -r requirements.txt
  fi
}

if [ -f /usr/local/bin/virtualenvwrapper_lazy.sh ];then
	source /usr/local/bin/virtualenvwrapper_lazy.sh
fi


# added by travis gem
#source /home/dlawrence/.travis/travis.sh

alias 'git lola'='log --graph --decorate --pretty=oneline --abbrev-commit --all'

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

alias vim='emacsclient -c'
alias vi='emacsclient -c'

export PATH="/usr/local/rbenv/shims:${PATH}"
#source "/usr/lib/rbenv/libexec/../completions/rbenv.zsh"
#rbenv rehash 2>/dev/null
#rbenv() {
#  command="$1"
#  if [ "$#" -gt 0 ]; then
#    shift
#  fi
#
##  case "$command" in
#  shell)
###    eval `rbenv "sh-$command" "$@"`;;
#  *)
#    command rbenv "$command" "$@";;
#  esac
#}
#
# Local AWS configuration
if [ -f ~/.aws ];then
source ~/.aws
fi

# use my local pip cache vi devpi
export PIP_INDEX_URL=http://localhost:3141/$USER/all/+simple/

# $ devpi-server --start
# $ devpi use http://localhost:3141
# $ devpi user -c $USER password=
# $ devpi login $USER --password=
# $ devpi index -c yourproject


# If we do not have a gpg-agent info file,
# We need to create one..
#if [ ! -f "/tmp/.gpg-agent-info-$(whoami)" ]; then
#    gpg-agent --daemon --write-env-file "/tmp/.gpg-agent-info-$(whoami)"
#fi

# Now we know its created -- Its time to load it.
#. "/tmp/.gpg-agent-info-$(whoami)"
#export GPG_AGENT_INFO
export SSH_AUTH_SOCK
#GPG_TTY=$(tty)
#export GPG_TTY

export TERM=xterm-256color

# python
if [ -f /usr/local/bin/virtualenvwrapper.sh ];then
   source /usr/local/bin/virtualenvwrapper.sh
fi

# nvm
export NVM_DIR="/home/m44716/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

# java
export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/jre/

# golang
export GOPATH=~/go
export PATH=$PATH:$GOPATH/bin/

# For android dev work
export PATH=$PATH:/home/dannyla/Downloads/adt/adt-bundle-linux-x86_64-20140702/sdk/tools/android:/home/dannyla/Downloads/adt/adt-bundle-linux-x86_64-20140702/sdk/tools/:/usr/lib/jvm/java-7-openjdk-amd64/
export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64/jre/
export ANDROID_HOME=/home/dannyla/Downloads/adt/adt-bundle-linux-x86_64-20140702/sdk

# proxy
if [ -f /etc/profile.d/http_proxy ];then
   source /etc/profile.d/http_proxy
fi

function set-eterm-dir {
    echo -e "\033AnSiTu" "$LOGNAME" # $LOGNAME is more portable than using whoami.
    echo -e "\033AnSiTc" "$(pwd)"
    echo -e "\033AnSiTh" "$(hostname)" # Using the -f option can
}

if [ ! -z $EMACS ];then
    PROMPT_COMMAND=set-eterm-dir
fi

# for tramp
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return

# Rip out proxies
function no_proxy() {
	 $(env |grep -i proxy | sed -e 's/=.*/=/' -e 's/^/export /')
}
